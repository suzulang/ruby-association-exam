{
  "questions": [
    {
      "id": 1,
      "content": "# Ruby技術者認定試験Silver模擬問題",
      "options": [
        {
          "label": "A",
          "content": "`\"\"`"
        },
        {
          "label": "B",
          "content": "`0`"
        },
        {
          "label": "C",
          "content": "`false`"
        },
        {
          "label": "D",
          "content": "`nil`"
        }
      ],
      "correct_answer": "A, B",
      "explanation": "Rubyではすべてのオブェクトが条件分岐で使用するための論理値を持ちます。\n\n`false`と`nil`は論理的に偽として、それ以外のすべてのオブジェクトは論理的に真として扱われます。"
    },
    {
      "id": 2,
      "content": "Rubyの予約語として正しいものをすべて選んでください。(2つ選択)**",
      "options": [
        {
          "label": "A",
          "content": "`each`"
        },
        {
          "label": "B",
          "content": "`rand`"
        },
        {
          "label": "C",
          "content": "`class`"
        },
        {
          "label": "D",
          "content": "`send`"
        },
        {
          "label": "E",
          "content": "`true`"
        }
      ],
      "correct_answer": "C, E",
      "explanation": "Ruby 3.1の予約語の一覧は以下のとおりです。\n\n![Ruby keywords](ruby-keywords.png)"
    },
    {
      "id": 3,
      "content": "Rubyの変数名として正しいものを選んでください。(1つ選択)**",
      "options": [
        {
          "label": "A",
          "content": "`3y`"
        },
        {
          "label": "B",
          "content": "`false`"
        },
        {
          "label": "C",
          "content": "`_9class`"
        },
        {
          "label": "E",
          "content": "`xyz$`"
        }
      ],
      "correct_answer": "C",
      "explanation": "Rubyのローカル変数名は小文字またはアンダースコアではじまり、アルファベット、数字、アンダースコア、非ASCII文字のみからなります。\n\n予約語を変数名として使用することはできません(例えば`class`という変数名は使用できません)が、予約語を含む変数名は許可されています(つまり`classy`や`_class`は有効な変数名です)。"
    },
    {
      "id": 4,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`puts \"i like writing #{$code}\"`"
        },
        {
          "label": "B",
          "content": "`puts \"i like writing #$code\"`"
        },
        {
          "label": "C",
          "content": "`puts 'i like writing #{$code}'`"
        },
        {
          "label": "D",
          "content": "`puts 'i like writing #$code'`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "A, B",
      "explanation": "シングルクォートの文字列リテラルはシンプルで、文字のそのままの列を表現します。\n\nダブルクォートの文字列リテラルはより複雑ですが、Rubyの式の評価結果を文字列中に埋め込む式展開(`#{...}`)のような機能を提供します。\n\nグローバル変数の値を埋め込む場合は`#$`を省略記法として使用できます(同様にインスタンス変数の場合は`#@`を使用できます)。この省略記法はより一般的な`#{...}`記法に比べるとあまり使われていません。"
    },
    {
      "id": 5,
      "content": "以下のコードがあります。** ",
      "options": [
        {
          "label": "A",
          "content": "`nil`"
        },
        {
          "label": "B",
          "content": "`025`"
        },
        {
          "label": "C",
          "content": "`21`"
        },
        {
          "label": "D",
          "content": "`25`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "C",
      "explanation": "整数リテラルの先頭の0は8進数表記を意味します。ただし、デフォルトでは10進数として出力が行われます。\n\n10進数以外での出力を行うためには、さまざまな書式化数値出力機能が提供されています(例: `Strign#%`、`Numeric#to_s(base)`、`Kernel#printf`)。"
    },
    {
      "id": 6,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "1"
        },
        {
          "label": "B",
          "content": "2"
        },
        {
          "label": "C",
          "content": "\"Hello\""
        },
        {
          "label": "D",
          "content": "true"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "三項演算子(`cond ? expr1 : expr2`)は`if/else`の省略形で、`cond`が真の場合`expr1`を、偽の場合`expr2`を返します。1行に収まるような短い文の記述に向いています。"
    },
    {
      "id": 7,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`\"S\"`"
        },
        {
          "label": "B",
          "content": "`\"M\"`"
        },
        {
          "label": "C",
          "content": "`\"L\"`"
        },
        {
          "label": "D",
          "content": "`\"XL\"`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "A",
      "explanation": "`case`文は`when`の条件にマッチする最初の分岐を実行します。\n\nRubyの範囲リテラル`x..y`は、`y`の値を含みます。\n\nしたがって、`1..120`と`120..170`の両方が`120`を含み、`when 1..120`の分岐が最初にマッチして実行されます。"
    },
    {
      "id": 8,
      "content": "以下のコードがあります。**",
      "options": [

      ],
      "code": "```\n```\n```\n```\n```\n```",
      "correct_answer": "D",
      "explanation": "ブロックでは外側のスコープのローカル変数にアクセスすることができますが、ブロックパラメータ自体は常にブロックローカルです。これはブロックパラメータの名前が外側のローカル変数と同じ場合、ブロック内ではブロックローカル変数が参照されることを意味します。これによって、変数名が衝突した場合に外側のローカル変数を誤って変更することが防がれます。\n\n外側のローカル変数と同名のブロックパラメータを定義することはアンチパターンと考えられ、プログラムの間違いのサインかもしれません。この問題を発見するには、`ruby`を`-w`オプション付きで実行し、`warning: shadowing outer local variable - item`のような警告を表示させるようにします。"
    },
    {
      "id": 9,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`0`"
        },
        {
          "label": "B",
          "content": "`4`"
        },
        {
          "label": "C",
          "content": "`6`"
        },
        {
          "label": "D",
          "content": "文法エラーが発生する"
        }
      ],
      "code": "```\n```",
      "correct_answer": "C",
      "explanation": "`Integer#times`メソッドは0から指定された値より1つ小さい整数までの値を順番にブロックパラメータとして渡します。\n\nブロックパラメータと同名の外側のローカル変数は参照できません(A8参照)が、他のローカル変数はアクセス・変更できます。これはRubyのブロックはクロージャであるためです。"
    },
    {
      "id": 10,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`[97, 98, 99, 100, 101]`"
        },
        {
          "label": "B",
          "content": "`[194, 196, 198, 200, 202]`"
        },
        {
          "label": "C",
          "content": "`[\"a\", \"b\", \"c\", \"d\", \"e\"]`"
        },
        {
          "label": "D",
          "content": "`[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"]`"
        },
        {
          "label": "E",
          "content": "実行時にエラーになる"
        }
      ],
      "code": "```\n```",
      "correct_answer": "D",
      "explanation": "[String#each_char](https://docs.ruby-lang.org/ja/3.1/class/String.html#I_EACH_CHAR)はレシーバのそれぞれの文字をyieldする[Enumerator](https://docs.ruby-lang.org/en/3.1/Enumerator.html)を返します。文字は1文字のも文字列で表現されることに注意してください。\n\n[Enumerable#map](https://docs.ruby-lang.org/ja/3.1/class/Enumerable.html#I_MAP) は与えられたブロックの値の配列を返します。\n\n`string * integer`は`string`を`integer`回コピーして連結した値を返します。\n\nしたがって、`s.each_char.map { |i| i * 2}`の評価結果は`[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"]`になります。"
    },
    {
      "id": 11,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`{99=>2, 111=>2, 97=>1}`"
        },
        {
          "label": "B",
          "content": "`{?c=>2, ?o=>2, ?a=>1}`"
        },
        {
          "label": "C",
          "content": "`{\"c\"=>2, \"o\"=>2, \"a\"=>1}`"
        },
        {
          "label": "D",
          "content": "実行時にエラーになる"
        }
      ],
      "code": "```\n```",
      "correct_answer": "C",
      "explanation": "[String#chars](https://docs.ruby-lang.org/ja/3.1/class/String.html#I_CHARS)はレシーバのすべての文字の配列を返します。文字は1文字のも文字列で表現されることに注意してください。\n\n[Enumerable#tally](https://docs.ruby-lang.org/ja/3.1/class/Enumerable.html#I_TALLY)は値が同じ要素の数を含むハッシュを返します。\n\nしたがって、`\"cocoa\".chars.tally`の評価結果は`{\"c\"=>2, \"o\"=>2, \"a\"=>1}`になります。"
    },
    {
      "id": 12,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`sub`"
        },
        {
          "label": "B",
          "content": "`gsub`"
        },
        {
          "label": "C",
          "content": "`replace`"
        },
        {
          "label": "D",
          "content": "`replace_all`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "[String#gsub](https://docs.ruby-lang.org/ja/3.1/class/String.html#I_GSUB)はパターンにマッチするすべての部分を置換した文字列を返します。\n\n\n[String#sub](https://docs.ruby-lang.org/ja/3.1/class/String.html#I_SUB)はパターンにマッチする最初の部分を置換した文字列を返します。\n\n[String#replace](https://docs.ruby-lang.org/ja/3.1/class/String.html#I_REPLACE) は与えられた文字列でレシーバの内容を置き換えます。\n\nStringに`#replace_all`メソッドはありません。"
    },
    {
      "id": 13,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "blank"
        },
        {
          "label": "B",
          "content": "short"
        },
        {
          "label": "C",
          "content": "long"
        },
        {
          "label": "D",
          "content": "例外が発生する"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "`if/elsif/else`文では、最初に条件を満たした`if`または`elsif`の分岐が実行されます。いずれも条件を満たさない場合は、`else`の分岐が実行されます。"
    },
    {
      "id": 14,
      "content": "**Q14: 以下のコードがあります。**",
      "options": [

      ],
      "code": "```\n```\n```\n```\n```\n```\n```\n```",
      "correct_answer": "B",
      "explanation": "[String#slice](https://docs.ruby-lang.org/ja/3.1/class/String.html#I_SLICE)は最初にマッチした部分文字列を返します。マッチしなかった場合は`nil`を返します。\n`x&.foo`は`x`が`nil`でない場合`x`に対して`foo`メソッドを呼び出します。`x`が`nil`の場合、`x&.foo`はメソッドを呼び出さず、`nil`を返します。"
    },
    {
      "id": 15,
      "content": "**Q15: 以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`[1, 2, 3]`"
        },
        {
          "label": "B",
          "content": "`[1, 4, 5]`"
        },
        {
          "label": "C",
          "content": "文法エラーが発生する"
        },
        {
          "label": "D",
          "content": "実行時にエラーになる"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "キーワード引数が与えられなかった場合、メソッド定義のデフォルト値が使用されます。"
    },
    {
      "id": 16,
      "content": "**Q16: 以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`foo(*h)`"
        },
        {
          "label": "B",
          "content": "`foo(**h)`"
        },
        {
          "label": "C",
          "content": "`foo(&h)`"
        },
        {
          "label": "D",
          "content": "`foo(^h)`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "`**` はHashをキーワード引数に変換します。"
    },
    {
      "id": 17,
      "content": "\"Ruby\"または\"ruby\"のいずれかの文字列のみにマッチする正規表現をすべて選択してください。(2つ選択)**",
      "options": [
        {
          "label": "A",
          "content": "`/\\A[Rr]uby\\z/`"
        },
        {
          "label": "B",
          "content": "`/\\ARuby|ruby\\z/`"
        },
        {
          "label": "C",
          "content": "`/\\A[Rr][u][b][y]\\z/`"
        },
        {
          "label": "D",
          "content": "`/\\AR|ruby\\z/`"
        }
      ],
      "correct_answer": "A, C",
      "explanation": "文字クラス(`[...]`)はブラケット内のいずれかの文字にマッチします。\n\n選択(`...|...`)は複数の部分式のいずれかにマッチします。\n\n`\\A`アンカーは文字列の先頭に、`\\z`アンカーは文字列の末尾にマッチします。\n\n(b)が正解でないのは、(b)の部分式は`\\ARuby`と`ruby\\z`であり、`Ruby123`のような文字列にもマッチしてしまうためです。"
    },
    {
      "id": 18,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "警告なしで`47`が表示される。"
        },
        {
          "label": "B",
          "content": "MSGは定数なのでエラーが発生する。"
        },
        {
          "label": "C",
          "content": "MSGは定数なので`42`が表示される。"
        },
        {
          "label": "D",
          "content": "MSGは定数なので警告が表示されるが、`47`が表示される。"
        }
      ],
      "code": "```\n```",
      "correct_answer": "D",
      "explanation": "定数は再定義できますが、通常あまり好ましくないため、警告が表示されます。\n\nRubyでは定数はモジュールやクラスの名前にも使用されるため、定数の再定義に関する警告は意図しない名前の衝突を防ぐために有用です。"
    },
    {
      "id": 19,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "MSGは定数なのでエラーが発生する。"
        },
        {
          "label": "B",
          "content": "警告なしで`HELLO`が表示される。"
        },
        {
          "label": "C",
          "content": "MSGは定数なので警告が表示されるが、`HELLO`が表示される。"
        },
        {
          "label": "D",
          "content": "MSGは定数なので`hello`が表示される。"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "定数は再定義されず、定数から参照されるオブジェクトの内容が変更されているだけなので、警告は表示されません。\n\n慣習的に定数から参照されるオブジェクトは変更されないものとして扱われますが、その慣習があてはまらないレアケースもあります。"
    },
    {
      "id": 20,
      "content": "以下の説明のうち正しいものをすべて選択してください。(2つ選択)**",
      "options": [
        {
          "label": "A",
          "content": "ローカル変数は小文字ではじまり、2文字以上の長さである。"
        },
        {
          "label": "B",
          "content": "グローバル変数は$ではじまる。"
        },
        {
          "label": "C",
          "content": "インスタンス変数は*ではじまる。"
        },
        {
          "label": "D",
          "content": "クラス変数は$ではじまる。"
        },
        {
          "label": "E",
          "content": "定数は大文字ではじまる。"
        }
      ],
      "correct_answer": "B, E",
      "explanation": "Rubyの変数名についてのルールは以下のとおりです。\n\n- グローバル変数は`$`ではじまります。\n- クラス変数は`@@`ではじまります。\n- インスタンス変数は`@`ではじまります。\n- ローカル変数は小文字またはアンダースコアではじまります。\n- 残りの文字はアルファベット、数字、アンダースコア、非ASCII文字に限定されます。"
    },
    {
      "id": 21,
      "content": "以下のコードがあります。**",
      "options": [

      ],
      "code": "```\n```\n```\n```\n```\n```\n```\n```\n```\n```",
      "correct_answer": "C",
      "explanation": "この例では、`x`と`y`は両方とも同じ配列オブジェクトを参照します。\n\n`Array#reject!`はレシーバを変更するため、両方の変数から参照される一つの配列が変更が変更されるということを意味します。"
    },
    {
      "id": 22,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`[2, 4, 6, 8, 10, 12]`"
        },
        {
          "label": "B",
          "content": "`[2, 4, 6, 8, 10]`"
        },
        {
          "label": "C",
          "content": "`[4, 6, 8, 12]`"
        },
        {
          "label": "D",
          "content": "`[4, 6, 8]`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "C",
      "explanation": "以下のような配列操作があります。\n\n- `shift`は配列の最初の要素を削除し、その要素を返します。\n- `pop`は配列の最後の要素を削除し、その要素を返します。\n- `push`は配列の末尾に指定された要素を追加します。"
    },
    {
      "id": 23,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`|`"
        },
        {
          "label": "B",
          "content": "`||`"
        },
        {
          "label": "C",
          "content": "`&`"
        },
        {
          "label": "D",
          "content": "`&&`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "論理演算子`||`と`&&`は短絡評価され、必要な場合だけ右辺が評価されます。\n\n真理値オブジェクトのために`|`と`&`が提供されており、これらは短絡評価を行わず、常に右辺が評価されます。\n\n`||`と`&&`はすべてのオブジェクトに対して使用できますが、`|`と`&`は実装されていないオブジェクトもあることに注意してください。"
    },
    {
      "id": 24,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`true`"
        },
        {
          "label": "B",
          "content": "`false`"
        },
        {
          "label": "C",
          "content": "`nil`"
        },
        {
          "label": "D",
          "content": "文法エラーが発生する"
        }
      ],
      "code": "```\n```",
      "correct_answer": "C",
      "explanation": "`or`演算子は短絡評価され`n = true`という式は実行されませんが、ローカル変数`n`は静的に宣言されます。したがって、変数は存在しますが、その値は`nil`です。"
    },
    {
      "id": 25,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`x[1, 3]`"
        },
        {
          "label": "B",
          "content": "`x[1..-1]`"
        },
        {
          "label": "C",
          "content": "`x[-3..-1]`"
        },
        {
          "label": "D",
          "content": "`x[-4..-2]`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "A, D",
      "explanation": "この問題では部分配列を指定する二つの異なる方法を示しています。\n\n一つのアプローチは二つの整数を使用する方法、つまり`x[1,3]`のような書き方で、これはインデックス`1`からはじまる長さ`3`の部分配列を意味します。\n\nAnother approach is to use a range, which generates a subarray based the index values within that range.\nもう一つのアプローチはRangeオブジェクトを使用する方法で、指定された範囲に含まれるインデックスの値にもとづいた部分配列を生成します。\n\n範囲を使うシンプルな形式は`x[1..3]`のようなもので、インデックス`1`ではじまり`3`で終わる部分配列を返します。\n\nしかし、Rubyでは負のインデックスも許可されており、配列の先頭からではなく末尾からのインデックスとして使用されます。\n\nしたがって、`x[-4..-2]`は配列の末尾から4番目から末尾から2番目までの部分配列を返します。\n\nインデックスの意味を明確にするため、この問題の配列の各要素に対応するインデックスの値を以下に示します。\n\n```\n x  [ 9,   7,   5,    3,    1]\n i    0    1    2     3     4\n-i   -5   -4   -3    -2    -1\n```"
    },
    {
      "id": 26,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`collect`"
        },
        {
          "label": "B",
          "content": "`select`"
        },
        {
          "label": "C",
          "content": "`map`"
        },
        {
          "label": "D",
          "content": "`filter`"
        },
        {
          "label": "E",
          "content": "`filter_map`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B, D",
      "explanation": "`Array#select`と`Array#filter`は与えられたブロックが真の値を返す要素の配列を返します。"
    },
    {
      "id": 27,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "42"
        },
        {
          "label": "B",
          "content": "42A7"
        },
        {
          "label": "C",
          "content": "17063"
        },
        {
          "label": "D",
          "content": "実行時にエラーになる"
        }
      ],
      "code": "```\n```",
      "correct_answer": "A",
      "explanation": "`String#to_i`は先頭の文字から整数としての解析を試み、指定された基数で有効な数字ではなくなるまで解析を続けます。文字列が有効な数字ではじまらない場合、`0`が返されます。\n\nデフォルトでは10進数として解析されますが、他の基数(`2`から`36`まで)をパラメータで指定することができます。\n\n`A`は10進数の一部として有効でないため`\"42A7\".to_i`は`42`を返しますが、`\"42A7\".to_i(16)`は16進数`0x42A7`の値(10進数では`17063`)を返すことに注意してください。"
    },
    {
      "id": 28,
      "content": "次のメソッドのうち`:c`がハッシュのキーとして存在するかどうかを「返さない」ものを選択してください。(1つ選択)**",
      "options": [
        {
          "label": "A",
          "content": "`p h.has_key?(:c)`"
        },
        {
          "label": "B",
          "content": "`p h.contain?(:c)`"
        },
        {
          "label": "C",
          "content": "`p h.include?(:c)`"
        },
        {
          "label": "D",
          "content": "`p h.key?(:c)`"
        },
        {
          "label": "E",
          "content": "`p h.member?(:c)`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "`has_key?`、`include?`、`key?`、`member?`はすべて同じメソッドの別名で、与えられたキーがハッシュに存在する場合`true`を、存在しない場合`false`を返します。\n\n`Hash`に`contain?`メソッドはありません。"
    },
    {
      "id": 29,
      "content": "\"以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`reject! {|i| i < 80}`"
        },
        {
          "label": "B",
          "content": "`slice {|i| i < 80 }`"
        },
        {
          "label": "C",
          "content": "`slice! {|i| i < 80}`"
        },
        {
          "label": "D",
          "content": "`delete_if! {|i| i < 80}`"
        },
        {
          "label": "E",
          "content": "`delete_if {|i| i < 80}`"
        },
        {
          "label": "F",
          "content": "`reject {|i| i < 80}`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "A, E",
      "explanation": "配列の操作に関する注意事項です。\n\n- `reject!`に加えて`reject`もあり、元の配列を変更する代りに新しい配列を返します。\n- `delete_if`の非破壊的バージョンはないため、`delete_if!`というメソッドはありません。Rubyでは似た機能のうち片方がより危険である場合にだけメソッド名の末尾に`!`を付けます。\n- `Array#slice`は`Array#[]`の別名で、条件によるフィルタリングを行うのではなく、インデックスにより特定の要素や部分配列を返します。`Array#slice`はブロックを取りません。"
    },
    {
      "id": 30,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`.concat`"
        },
        {
          "label": "B",
          "content": "`&`"
        },
        {
          "label": "C",
          "content": "`|`"
        },
        {
          "label": "D",
          "content": "`||`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "C",
      "explanation": "`|`演算子は和集合に相当します。二つの配列を重複を除去して結合し、元の順序を保持した新しい配列を返します。"
    },
    {
      "id": 31,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`\"x1 x2 x3\"`"
        },
        {
          "label": "B",
          "content": "`[1, 2, 3]`"
        },
        {
          "label": "C",
          "content": "`[\"x1\", \"x2\", \"x3\"]`"
        },
        {
          "label": "D",
          "content": "`[:x1, :x2, :x3]`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "D",
      "explanation": "`%i(...)`は式展開を行わずにシンボルの配列を返します。シンボルは空白で区切られます。\n\n詳細は[%記法のドキュメント](https://docs.ruby-lang.org/ja/3.1/doc/spec=2fliteral.html#percent)を参照してください。"
    },
    {
      "id": 32,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "A syntax error"
        },
        {
          "label": "B",
          "content": "`SomeError`"
        },
        {
          "label": "C",
          "content": "`SomeErrorSomeOtherError`"
        },
        {
          "label": "D",
          "content": "`SomeOtherError`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "`begin/rescue/end`では最初に該当した`rescue`節が実行されます。\n\n`SomeOtherError`は`SomeError`のサブクラスなので、`rescue SomeError`節が該当して実行されます。\n\n現実のアプリケーションでは、一般的なエラーよりも特定的なエラーから順に`rescue`するのがよい習慣です(例えば、`rescue StandardError`は最後に記述します)。"
    },
    {
      "id": 33,
      "content": "以下のコードがあります。**",
      "options": [

      ],
      "code": "```\n```\n```\n```\n```\n```\n```\n```\n```\n```",
      "correct_answer": "C",
      "explanation": "0による除算で`ZeroDivisionError`が発生します。\n\n`ZeroDivisionError`が補足され、メッセージが出力されます。`exit(1)`はエラーコードとともにプログラムの実行を終了します。\n\nしかし、`begin...end`に`ensure`節があるため、インタープリタの終了前に`ensure`節が実行されます。\n\n`ensure`節は、例外が発生したりRubyが終了した時にも後始末を行うことができるため、便利です。ファイルハンドルやデータベース接続のクローズなどに利用されます。"
    },
    {
      "id": 34,
      "content": "Rubyのクラスの説明として正しいものを選択してください。(1つ選択)**",
      "options": [
        {
          "label": "A",
          "content": "例外`UndefinedParentClassError`が発生する"
        },
        {
          "label": "B",
          "content": "文法エラーが発生する"
        },
        {
          "label": "C",
          "content": "`Module`クラスがスーパークラスになる"
        },
        {
          "label": "D",
          "content": "スーパークラスのないクラスが作成される"
        },
        {
          "label": "E",
          "content": "`Object`クラスがスーパークラスになる"
        }
      ],
      "correct_answer": "E",
      "explanation": "デフォルトでは、明示的にスーパークラスを指定してもしなくても、すべてのクラスは`Object`を継承します。\n\n`Object`を継承しないクラス階層を構築するには、代りに`BasicObject`を継承することができます。`BasicObject`は非常に少ない機能しか備えておらず、通常のユースケースでは`BasicObject`を直接継承する必要はありません。"
    },
    {
      "id": 35,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "何も出力されない"
        },
        {
          "label": "B",
          "content": "実行時にエラーになる"
        },
        {
          "label": "C",
          "content": "`MOO!`"
        },
        {
          "label": "D",
          "content": "`nil`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "C",
      "explanation": "クラス定義はいつでも再オープンして更新することができます。`Object`のような組み込みクラスの場合も同様です。\n\nすべての組み込みクラス(ただし`BasicObject`は除く)は`Object`を継承しているため、`Object`にメソッドを追加するとすべてのオブジェクトで利用できます。"
    },
    {
      "id": 36,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`Shouter`"
        },
        {
          "label": "B",
          "content": "`new`"
        },
        {
          "label": "C",
          "content": "`initialize`"
        },
        {
          "label": "D",
          "content": "`__init__`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "C",
      "explanation": "クラスに対して`new`メソッドが呼ばれると、そのクラスのインスタンスが生成され、そのインスタンスに対して`initialize`が呼ばれます。この動作によりインスタンス生成時の初期化が可能になっています。"
    },
    {
      "id": 37,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`Shouter`"
        },
        {
          "label": "B",
          "content": "`#Shouter`"
        },
        {
          "label": "C",
          "content": "`new Shouter`"
        },
        {
          "label": "D",
          "content": "`Shouter.new`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "D",
      "explanation": "`Class`に定義されている`new`メソッドは新しいインスタンスの作成に使用されます。"
    },
    {
      "id": 38,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "apple"
        },
        {
          "label": "B",
          "content": "banana"
        },
        {
          "label": "C",
          "content": "何も出力されない"
        },
        {
          "label": "D",
          "content": "実行時にエラーになる"
        }
      ],
      "code": "```\n```",
      "correct_answer": "A",
      "explanation": "予約語`super`は継承ツリーの祖先の同名のメソッドを呼びます。\n\nこの例では、`Bar.new`によって`Bar#initialize`が呼ばれ、`@var = \"banana\"`の代入が実行されます。しかしその直後に`super`によって`Foo#initialize`が呼ばれて`@var = apple\"`の代入が実行されるため、最終的に`apple`が出力されます。"
    },
    {
      "id": 39,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`sub`"
        },
        {
          "label": "B",
          "content": "`chop`"
        },
        {
          "label": "C",
          "content": "`delete`"
        },
        {
          "label": "D",
          "content": "`delete_prefix`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "D",
      "explanation": "[String#delete_prefix](https://docs.ruby-lang.org/ja/3.1/class/String.html#I_DELETE_PREFIX)は与えられた文字列を先頭から削除した文字列を返します。\n\n[String#delete](https://docs.ruby-lang.org/ja/3.1/class/String.html#I_DELETE)は引数で指定されたすべての文字を削除するため、`\"$foo$\".delete(\"$\")`の評価結果は`\"foo\"`になります。\n\n\n[String#sub](https://docs.ruby-lang.org/ja/3.1/class/String.html#I_SUB)は2つの引数を取り、[String#chop](https://docs.ruby-lang.org/ja/3.1/class/String.html#I_CHOP)は引数を取らないため、`sub(\"$\")`と`chop(\"$\")`はArgumentErrorになります。"
    },
    {
      "id": 40,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`array`"
        },
        {
          "label": "B",
          "content": "`to_ary`"
        },
        {
          "label": "C",
          "content": "`to_a`"
        },
        {
          "label": "D",
          "content": "`to_array`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "C",
      "explanation": "`to_a`という名前のメソッドは慣習的にオブジェクトを配列に変換するために使用され、Rubyのコレクションクラスで利用可能です。\n\nいくつかのオブジェクトでは`to_ary`も実装され、暗黙的な配列への変換に使用されます。例えば、`Array#flatten`はそれぞれの要素に対して`to_ary`の呼び出しを試みます。しかし、通常のユースケースでは`to_ary`はあまり使用されません。"
    },
    {
      "id": 41,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`[0, 1, 2]`"
        },
        {
          "label": "B",
          "content": "`0`"
        },
        {
          "label": "C",
          "content": "`[0, 1, 2, 3]`"
        },
        {
          "label": "D",
          "content": "`true`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "`#find`メソッドは`Enumerable`モジュールに定義されており、ブロックの値が真になる最初の要素を返します。\n\n`Enumerable#find`には`Enumerable#detect`という別名があることに注意してください。"
    },
    {
      "id": 42,
      "content": "以下の実行結果を出力するコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`sort_by { |x| -x }`"
        },
        {
          "label": "B",
          "content": "`sort_reverse`"
        },
        {
          "label": "C",
          "content": "`sort.reverse`"
        },
        {
          "label": "D",
          "content": "`reverse.sort`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "A, C",
      "explanation": "`sort_by`メソッドはコレクションの要素に対してブロックの値を対応付け、ブロックの値の昇順で要素をソートします。\n\n`sort`メソッドは(ブロックがない場合)要素を昇順にソートします。ブロックを与えると要素をブロックで比較してソートすることができます。\n\n`sort_by`も`sort`もオブジェクトを`<=>`演算子で比較できることに依存しています。Rubyの数値クラスはすべて`<=>`演算子を実装していますが、自分は作成したクラスに定義することもできます。"
    },
    {
      "id": 43,
      "content": "配列を降順にソートするコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`sort { |i,j| -i <= -j }`"
        },
        {
          "label": "B",
          "content": "`sort { |i,j| -i <=> -j }`"
        },
        {
          "label": "C",
          "content": "`sort { |i,j| i >= j }`"
        },
        {
          "label": "D",
          "content": "`sort{ |i,j| i <=> j }`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "`sort`メソッドにブロックを与えると、要素をブロックで比較してソートします。\n\nブロックでは二つの要素の比較を行い、最初の要素の順序が前の場合は負の値を、二つの要素の順序が同じ場合は0を、最初の要素の順序が後の場合は正の値を返す必要があります。\n\nRubyの数値クラスの`<=>`の動作は、この挙動を自動的に提供します。\n\n```\n>> 3 <=> 1\n=> 1\n>> 3 <=> 3\n=> 0\n>> 3 <=> 5\n=> -1\n```\n\n`<=>`(UFO演算子)は意味のあるソート順序をもつ任意のオブジェクトに実装可能です。"
    },
    {
      "id": 44,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "hello"
        },
        {
          "label": "B",
          "content": "rubyworld"
        },
        {
          "label": "C",
          "content": "hellor"
        },
        {
          "label": "D",
          "content": "rubyw"
        },
        {
          "label": "E",
          "content": "orubyworld"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "The `seek` method is used to move to a specific byte offset in an I/O stream.\nOffsets are zero-based, so `seek(5)` sets the position in the stream to just *after* the fifth byte.\n`seek`メソッドはI/Oストリームの特定のバイトオフセットに移動するために使用されます。\nオフセットは0ベースで、`seek(5)`は5バイト目の直後の位置にセットします。\n\n`gets`メソッドはストリームの現在の位置から行の終端まで読み込みます。"
    },
    {
      "id": 45,
      "content": "以下のコードではopenメソッドの第2引数を省略してファイルを開いています。このケースで暗黙的に第2引数として指定されるものを選択してください。**",
      "options": [
        {
          "label": "A",
          "content": "`r`"
        },
        {
          "label": "B",
          "content": "`r+`"
        },
        {
          "label": "C",
          "content": "`a`"
        },
        {
          "label": "D",
          "content": "`a+`"
        },
        {
          "label": "E",
          "content": "`w`"
        },
        {
          "label": "F",
          "content": "`w+`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "A",
      "explanation": "`\"r\"`オープンモードは「ファイルの先頭から読み込みのみ」を意味します。\n\nこれはデフォルトの挙動として安全で、もっとも一般的なユースケースです。"
    },
    {
      "id": 46,
      "content": "**Q46: test_one.txtの内容をtest_two.txtにコピーするコードがあります。",
      "options": [
        {
          "label": "A",
          "content": "`r+`"
        },
        {
          "label": "B",
          "content": "`a`"
        },
        {
          "label": "C",
          "content": "`a+`"
        },
        {
          "label": "D",
          "content": "`w`"
        },
        {
          "label": "E",
          "content": "`w+`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "D, E",
      "explanation": "Rubyでは以下のI/Oオープンモードがサポ一トされています。\n\n```\n\"r\"  ファイルの先頭から読み込みのみ(デフォルトのモード)\n\n\"r+\" ファイルの先頭から読み書き可能\n\n\"w\"  既存のファイルを0バイトに切り詰めるか新しくファイルを作成し、書き込みのみ\n\n\"w+\" 既存のファイルを0バイトに切り詰めるか新しくファイルを作成し、読み書き可能\n\n\"a\"  存在しなければ新しくファイルを作成し、ファイル末尾に追記。書き込みのみ\n\n\"a+\" 存在しなければ新しくファイルを作成し、ファイル末尾に追記。読み書き可能\n```"
    },
    {
      "id": 47,
      "content": "**Q47: `Dir`クラスに存在しないクラスメソッドを選択してください。(2つ選択)**",
      "options": [
        {
          "label": "A",
          "content": "`Dir.pwd`"
        },
        {
          "label": "B",
          "content": "`Dir.rename`"
        },
        {
          "label": "C",
          "content": "`Dir.basename`"
        },
        {
          "label": "D",
          "content": "`Dir.chdir`"
        },
        {
          "label": "E",
          "content": "`Dir.delete`"
        }
      ],
      "correct_answer": "B, C",
      "explanation": "補足説明:\n\nfileutils標準ライブラリの`FileUtils.mv`はディレクトリの名前変更に使用できます。\n\n`File.basename`はパスの末尾のファイル名を取得するのに使用されます(例: `File.basename(\"long/path/to/something\") #=> \"something\"`)。"
    },
    {
      "id": 48,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`\"hello \"`"
        },
        {
          "label": "B",
          "content": "`\"ruby\"`"
        },
        {
          "label": "C",
          "content": "`\" world\"`"
        },
        {
          "label": "D",
          "content": "実行時にエラーになる"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "部分配列のインデックスの指定方法(Q25)と同様に、開始位置と長さを指定して部分文字列を取得することができます。\n\nインデックスはバイト単位ではなく文字(コードポイント)単位であることに注意してください。"
    },
    {
      "id": 49,
      "content": "**Q49:** ",
      "options": [
        {
          "label": "A",
          "content": "`\"boo\"`"
        },
        {
          "label": "B",
          "content": "`\"bot\"`"
        },
        {
          "label": "C",
          "content": "`\"oat\"`"
        },
        {
          "label": "D",
          "content": "`\"o\"`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "置換文字列の長さは元の部分文字列の長さと同じでなくともよいことに注意してください。例えば以下のような操作が可能です。\n\n```\n>> str = \"boat\"\n=> \"boat\"\n>> str[1,2] = \"uil\"\n=> \"uil\"\n>> str\n=> \"built\"\n```"
    },
    {
      "id": 50,
      "content": "以下のコードがあります。**",
      "options": [
        {
          "label": "A",
          "content": "`\"hihihihihi\"`"
        },
        {
          "label": "B",
          "content": "実行時にエラーになる"
        },
        {
          "label": "C",
          "content": "`\"5hi\"`"
        },
        {
          "label": "D",
          "content": "`\"5*hi\"`"
        }
      ],
      "code": "```\n```",
      "correct_answer": "B",
      "explanation": "Rubyの数値クラスでは算術演算の時にオブジェクトを同じ型に変換する`coerce`メソッドが定義されています。このメソッドは`String`クラスでは定義されていないため、`TypeError`が発生します。\n\n`\"hi\" * 5`のように順番を入れ替えた場合、結果は`\"hihihihihi\"`になることに注意してください。これは`String`自体に`*`演算子が定義されていて、文字列が左辺の場合に使用されるためです。"
    }
  ]
}